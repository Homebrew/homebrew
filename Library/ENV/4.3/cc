#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -W0

#TODO make it work with homebrew/dupes/gcc
#TODO? If we find -mmacosx-version-min=10.8, change sdkroot? warn visibly if no such SDK?
#TODO fix pkg-config files, should point to /usr/local or /usr/local/opt
#TODO create mechanism to specify build effects like %w{-O0 -O4 vanilla-arg-parsing sdk=10.6} etc.

require "#{File.dirname __FILE__}/../libsuperenv"
require 'set'

def cccfg? flags
  flags.split('').all?{|c| ENV['HOMEBREW_CCCFG'].include? c } if ENV['HOMEBREW_CCCFG']
end
def nclt?
  $sdkroot != nil
end
def syspath
  if nclt?
    %W{#$sdkroot/usr #$sdkroot/usr/local}
  else
    %W{/usr /usr/local}
  end
end

module ExecLogExtension
  def exec *args
    path = File.expand_path('~/Library/Logs/Homebrew/cc.log')
    open(path, 'a') do |f|
      f.print '[', $0
      f.print " -%s" % ENV['HOMEBREW_CCCFG'] if ENV['HOMEBREW_CCCFG']
      f.print '] '
      f.puts args.join(' ')
      f.puts
    end
    Kernel.exec *args
  end
end

class Cmd
  def initialize path, args
    @arg0 = path.basename.freeze
    @args = args.freeze
  end
  def mode
    if @arg0 == 'cpp' or @arg0 == 'ld'
      @arg0.to_sym
    elsif @args.include? '-c'
      if @arg0 =~ /(?:c|g|clang)\+\+/
        :cxx
      else
        :cc
      end
    elsif @args.include? '-E'
      :ccE
    else
      if @arg0 =~ /(?:c|g|clang)\+\+/
        :cxxld
      else
        :ccld
      end
    end
  end
  def tool
    @tool ||= case @arg0
    when 'ld' then 'ld'
    when 'cpp' then 'cpp'
    when /\w\+\+$/
      case ENV['HOMEBREW_CC']
      when /clang/
        'clang++'
      when /llvm-gcc/
        'llvm-g++-4.2'
      when /gcc(-\d\.\d)?$/
        'g++' + $1.to_s
      end
    else
      # Note that this is a universal fallback, so that we'll always invoke
      # HOMEBREW_CC regardless of what name under which the tool was invoked.
      ENV['HOMEBREW_CC']
    end
  end
  def args
    args = if not cccfg? 'O' or tool == 'ld'
      @args.dup
    else
      refurbished_args
    end
    ENV['HOMEBREW_ARCHS'].split(',').each { |a| args << "-arch" << a } if cccfg? 'u' and not (mode == :cpp or mode == :ccE)
    if tool != 'ld'
      args << "--sysroot=#$sdkroot"
    else
      args << "-syslibroot" << $sdkroot
    end if nclt?
    allflags = case mode
    when :ccld, :cxxld
      cflags + args + cppflags + ldflags
    when :cc, :cxx
      cflags + args + cppflags
    when :ccE
      args + cppflags
    when :cpp
      args + cppflags
    when :ld
      ldflags + args
    end.compact
    make_fuss(allflags) if verbose?
    allflags
  end
  def refurbished_args
    lsets = { :all => Set.new(libpath + syslibpath)}
    isets = { :all => Set.new(cpath.flatten)}
    valid_arch_set=Set.new(ENV['HOMEBREW_ARCHS'].split(','))
    arch_set = Set.new()
    valid_arch_set.each do |architecture|
      lsets[architecture]=Set.new
      isets[architecture]=Set.new
    end
    args = []
    arch = :all
    whittler = @args.each
    loop do
      case arg = whittler.next
      when /^-Xarch_/
        arch = $' #/^-Xarch_/ matched.
      when '-arch'
        arch = whittler.next
        args << "-arch" << arch if cccfg? 'U' and valid_arch_set.include?(arch) and arch_set.add?(arch) # -Xarch_XXX -arch is stupid, overlooking it
      when '-m32'
        # If ENV.m32 was set, we allow the "-m32" flag, but we don't add anything
        args << "-Xarch_#{arch}" unless arch == :all
        args << '-m32' if cccfg? '3'
      when /^-g\d?/, /^-gstabs\d+/, '-gstabs+', /^-ggdb\d?/, '-gdwarf-2',# this removes debug information (so what's the point of having 
           /^-march=.+/, /^-mtune=.+/, /^-mcpu=.+/, '-m64',              # formulae which can build debug eg qt.rb
           /^-O[0-9zs]?$/, '-fast',                                      # same for release optimization
           '-pedantic', '-pedantic-errors'
      when '-fopenmp', '-lgomp'
        # clang doesn't support OpenMP
        if not tool =~ /^clang/
          args << "-Xarch_#{arch}" unless arch == :all
          args << arg
        end
      when /^-W.*/
        if arg =~ /^-W[alp],/
          args << "-Xarch_#{arch}" unless arch == :all
          args << arg if arg =~ /^-W[alp],/
        end
      when '-macosx_version_min', '-dylib_install_name'
        if arch == :all
          args << "-Wl,#{arg},#{whittler.next}"
        else
          flag = arg
          arg = whittler.next
          arg = whittler.next if arg == "-Xarch_#{arch}"
          args << "-Xarch_#{arch}" << "-Wl,#{arg},#{whittler.next}"
        end
      when /^-isysroot/
        # We set the sysroot
        whittler.next
        whittler.next unless arch == :all
      when '-dylib'
        args << "-Xarch_#{arch}" unless arch == :all
        args << "-Wl,#{arg}"
      when /^-I(.+)/
        # it is okay to add a space after the -I; so let's support it
        path = $1.chuzzle || whittler.next # just assume we haven't -Xarch_XXX -I -Xarch_XXX path
        if not isets[:all].include?(path.cleanpath) and isets[arch].add?(path.cleanpath)
          args << "-Xarch_#{arch}" unless arch == :all
          args << "-I#{path}"
        end
      when /^-L(.+)/
        # it is okay to add a space after the -L; so let's support it
        path = $1.chuzzle || whittler.next # just assume we haven't -Xarch_XXX -L -Xarch_XXX path
        doit = case path.cleanpath
        when %r{^#$brewfix}
          # maybe homebrew is installed to /sw or /opt/brew
          true
        when %r{^/opt}, %r{^/sw}, %r{/usr/X11}
          false
        else
          true
        end
          if doit and not lsets[:all].include?(path.cleanpath) and lsets[arch].add?(path.cleanpath)
            args << "-Xarch_#{arch}" unless arch == :all
            args << "-L#{path}"
          end
      else
        args << "-Xarch_#{arch}" unless arch == :all
        args << arg
      end
      arch = :all unless arg =~ /^-Xarch_/ #reset -Xarch_
    end
    args
  end
  def cflags
    args = []
    if mode == :cxx
      args << '-std=c++11' if cccfg? 'x'
      args << '-stdlib=libc++' if cccfg? 'g'
      args << '-stdlib=libstdc++' if cccfg? 'h'
    end

    return args unless cccfg? 'O'

    args << '-pipe' << '-w' << '-Os'

    # When bottling use the oldest supported CPU type.
    if cccfg? 'bc'
      # Custom bottle specified during the build
      args << ENV['HOMEBREW_ARCHFLAGS']
    elsif cccfg? 'bi6'
      args << '-march=core2'
    elsif cccfg? 'bi'
      args << '-march=prescott'
    elsif cccfg? 'bpA'
      args << '-mcpu=7400'
    elsif cccfg? 'bp'
      args << '-mcpu=750'
    else
      args << '-march=native' if tool =~ /clang/
    end

    args << "-std=#{@arg0}" if @arg0 =~ /c[89]9/
    args
  end
  def syslibpath
    # We reject brew's lib as we explicitly add this as a -L flag, thus it
    # is given higher priority by cc, so it surpasses the system libpath.
    # NOTE this only counts if Homebrew is installed at /usr/local
    syspath.map{|d| "#{d}/lib" }.reject{|d| d == "#$brewfix/lib" }
  end
  def syscpath
    isystem, _ = cpath
    isystem + syspath.map{|d| "#{d}/include" }
  end
  def cpath
    cpath = ENV['CMAKE_PREFIX_PATH'].split(':').map{|d| "#{d}/include" } + ENV['CMAKE_INCLUDE_PATH'].split(':')
    opt = cpath.select{|prefix| prefix =~ %r{^#$brewfix/opt} }
    sys = cpath - opt
    [sys, opt]
  end
  def libpath
    ENV['CMAKE_PREFIX_PATH'].split(':').map{|d| "#{d}/lib" } +
    ENV['CMAKE_LIBRARY_PATH'].split(':') -
    syslibpath
  end
  def ldflags
    args = libpath.to_flags('-L')
    case mode
    when :ld   then args << '-headerpad_max_install_names'
    when :ccld then args << '-Wl,-headerpad_max_install_names'
    when :cxxld
      args << '-Wl,-headerpad_max_install_names'
      args << '-stdlib=libc++' if cccfg? 'g'
      args << '-stdlib=libstdc++' if cccfg? 'h'
    end
    args
  end
  def cppflags
    sys, opt = cpath
    # we want our keg-only includes to be found before system includes *and*
    # before any other includes the build-system adds
    sys.to_flags('-isystem') + opt.to_flags('-I')
  end
  def make_fuss args
    dels = @args - args
    adds = args - @args
    dups = dels & args

    puts "brew: superenv removed: #{dels*' '}" unless dels.empty?
    puts "brew: superenv deduped: #{dups}" unless dups.empty?
    puts "brew: superenv added: #{adds*' '}" unless adds.empty?
  end
  def verbose?
    !ENV['VERBOSE'].nil? || !ENV['HOMEBREW_VERBOSE'].nil?
  end
end

if __FILE__ == $PROGRAM_NAME
  ##################################################################### sanity
  abort "The build-tool has reset ENV. --env=std required." unless ENV['HOMEBREW_BREW_FILE']

  case ENV['HOMEBREW_CC'].chuzzle when 'cc', nil
    # those values are not allowed
    ENV['HOMEBREW_CC'] = 'clang'
  end

  ####################################################################### main
  extend(ExecLogExtension) if ENV['HOMEBREW_LOG']
  cmd = Cmd.new($0, ARGV)
  exec "xcrun", cmd.tool, *cmd.args
end
